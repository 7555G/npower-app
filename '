#pragma once

#include <QObject>
#include <QThread>
#include <qqml.h>
#include <sqlite3.h>

#include <memory>

#include "npower_sensors.hpp"
#include "fake_sensors.hpp"


#ifndef USE_FAKE_SENSORS
    #define SENSORS npower_sensors
#else
    #define SENSORS fake_sensors
#endif  // USE_FAKE_SENSORS


using std::string;


namespace Backend {

class Challenge;
class BatteryMonitor;
class Leaderboard;

enum class ChallengeType {
    record,
    time_attack
};

class Controller : public QObject {
    Q_OBJECT

    Q_PROPERTY(int chargePercenage
        MEMBER charge_percentage
        NOTIFY chargePercentageChanged
    )
    Q_PROPERTY(int remainingTime
        MEMBER remaining_time
        WRITE setRemainingTime
        NOTIFY remainingTimeChanged
    )
    Q_PROPERTY(int time
        MEMBER time
        NOTIFY timeChanged
        WRITE setTime
    )
    Q_PROPERTY(int steps
        MEMBER steps
        NOTIFY stepsChanged
        WRITE setSteps
    )
    Q_PROPERTY(float speed
        MEMBER speed
        NOTIFY speedChanged
        WRITE setSpeed
    )
    Q_PROPERTY(float power
        MEMBER power
        NOTIFY powerChanged
        WRITE setPower
    )
    Q_PROPERTY(QString challengeType
        MEMBER challenge_type
        WRITE setChallengeType
    )
    Q_PROPERTY(QVariantList scores
        MEMBER scores
        NOTIFY scoresChanged
    )

  public:
    Controller();
    ~Controller();

    static std::unique_ptr<SENSORS::HallSensor> hallSensor;
    static std::unique_ptr<SENSORS::Wattmeter> wattmeter;

    int remaining_time;
    int time;
    int steps;
    float speed;
    float power;

    int charge_percentage;
    QString challenge_type;
    float worst_score;
    QVariantList scores;

    bool battery_monitor_on;
    bool challenge_monitor_on;

    void setChallengeType(string value);
    void setRemainingTime(int value);
    void setTime(int value);
    void setSteps(int value);
    void setSpeed(float value);
    void setPower(float value);

  signals:
    void runBatteryMonitor(Controller * controller);
    void runChallenge(Controller * controller);

    void chargePercentageChanged(int value);
    void remainingTimeChanged(int value);
    void scoresChanged(QVariantList scores);
    void timeChanged(int value);
    void stepsChanged(int value);
    void speedChanged(float value);
    void powerChanged(float value);

  public slots:
    void startBatteryMonitor();
    void stopBatteryMonitor();

    void startChallenge();
    void stopChallenge();

    void startLeaderboard();
    void stopLeaderboard();

  private:
    BatteryMonitor * batteryMonitor;
    QThread * batteryMonitorThread;

    Challenge * challenge;
    QThread * challengeThread;

    Leaderboard * leaderboard;
    QThread * leaderboardThread;
};  // class Controller


class BatteryMonitor : public QObject {
    Q_OBJECT

  public:
    BatteryMonitor();
    ~BatteryMonitor();

  public slots:
    void start(Controller * controller);
};  // class BatteryMonitor


class Challenge : public QObject {
    Q_OBJECT

  public:
    Challenge();
    ~Challenge();

  public slots:
    void start(Controller * controller);

  private:
    static void monitorStepsPThread(Controller * controller);
    static void monitorPowerPThread(Controller * controller);
};  // class Challenge


class Leaderboard : public QObject  {
    Q_OBJECT

  public:
    Leaderboard(Controller * controller);
    ~Leaderboard();

    int row;
    string worst;

    // function to insert new entry
    int insertRecord(float new_score = 0, string new_name = "");

    // function to delete worst score entry
    int deleteLastRecord();

    // function to delete empty entries
    int cleanUpRecords();

    int showContents();
    int readWorstScore();
    int readContents();

  private:
    Controller * controller;

    string db_file;
    sqlite3 * db;
    static string const query_cmd;
    int failed;
    int status;
    char * messageError;

    static int score_callback(
        void * data, int cols, char * field[], char * col_names[]
    );
    static int contents_callback(
        void * data, int cols, char * field[], char * col_names[]
    );
    static int print_callback(
        void * data, int cols, char * field[], char * col_names[]
    );
};  // class Leaderboard

}  // namespace Backend
